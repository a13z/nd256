Analysis. Worst Case Big O Notation.

Note: I have approximated the Worst Case Big 0 Notation and I didn't count all the lines.
Please, let me know otherwise.

Task0.py
The Big O Notation is constant, O(1) since it always run two print instructions.

Task1.py
Note: I use set instead of list to avoid the containment check as advised by the reviewer. Thank you!

Since there are two loops with different sizes in sequence, Texts with a size of n and Calls with size of m,
worst case Big O would be O(n + m)

Task2.py
Note: I use dict instead of a list as advised by the reviewer. Thank you!

There is a loop going through all calls and inside there are two conditions to check if the number is in the
dictionary. If it is not, it will add it to the phonedict with the duration and if is,
it will sum the duration to the previous value.

The loop has a worst case Big O of O(n) and inside there are two conditions to check if the phone is in
the phonedict which worst case Big O is O (n) per condition. Based on http://bigocheatsheet.com accesing
a dictionary (Hash table) has worst case Big O of O (n)

Total Big O would be O (n ^ 3)


Task3.py
Note: Task has been simplified as per reviewer's suggestion. Many thanks!

Part A.
Contains a loop to iterate calls and add phone numbers to a set based on some conditions.
This has a worst case Big O of O (n)
Then, there is another loop with a sorted() to print the area codes in order.
This has a cost of Big O (n * n log n) which is O (n^2 log n)

Worst case Big O for Part A would be O (n + n^2 log n)

Part B.
Worst case Big O would be O (1) since there is just one single instruction.

Task4.py
Note: I use sets as advised by the reviewer. Thanks a lot!
I created to sets numbers_making_calls and numbers_receiving_calls_or_texting and initialised them with
two loops. Each initialization has a worst case Big O of O (n) so total would be O (2n)

Then I loop through texts in order to add the numbers to the numbers_receiving_calls_or_texting set.
This has a worst case Big O of O(n)

There is a substraction of two sets numbers_making_calls minus numbers_receiving_calls_or_texting which
average cost Big O(len(numbers_making_calls)) based on https://wiki.python.org/moin/TimeComplexity.
I assumed the worst case Big O is the same as the average.

There is a final loop with a sorted() to print the possible telemarketers in order which worst case Big O
is O (n * n log n)

Total worst case Big O would be O (2n + n + len(numbers_making_calls) + n * n log n) which is
O (3n + len(numbers_making_calls) + n^2 log n)

I think this could be approximately O (n^2 log n)


